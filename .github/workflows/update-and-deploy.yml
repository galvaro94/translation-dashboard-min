name: Update & Deploy Dashboard

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 * * * 1-5" # hourly on weekdays (UTC). Adjust if you want.

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install deps
        run: npm install

      - name: Fetch Google Sheets data and build site
        env:
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
        run: |
          node - <<'NODE'
          const { GoogleSpreadsheet } = require('google-spreadsheet');
          const fs = require('fs');

          (async () => {
            try {
              const sheetId = process.env.GOOGLE_SHEET_ID;
              const credsRaw = process.env.GOOGLE_SERVICE_ACCOUNT;
              if (!sheetId || !credsRaw) throw new Error('Missing GOOGLE_SHEET_ID or GOOGLE_SERVICE_ACCOUNT');

              const creds = JSON.parse(credsRaw);
              if (creds.private_key && creds.private_key.includes('\\n')) {
                creds.private_key = creds.private_key.replace(/\\n/g, '\n');
              }

              // Connect
              const doc = new GoogleSpreadsheet(sheetId);
              await doc.useServiceAccountAuth({ client_email: creds.client_email, private_key: creds.private_key });
              await doc.loadInfo();
              const sheet = doc.sheetsByIndex[0];
              const rows = await sheet.getRows();

              // Transform: 0: Date Requested | 1: Program | 2: Language | 3: Document Name | 4: Deadline | 5: Status | 6: Link
              const data = rows.map((row, i) => {
                const r = row._rawData || [];
                return {
                  id: i + 1,
                  program: (r[1] || '').toString().trim(),
                  language: (r[2] || '').toString().trim(),
                  title: (r[3] || '').toString().trim(),
                  deadline: (r[4] || '').toString().trim(),
                  status: (r[5] || 'Pending').toString().trim(),
                  link: (r[6] || '').toString().trim(),
                  requested: (r[0] || '').toString().trim()
                };
              }).filter(d => d.program && d.title);

              // Ensure output folder
              require('fs').mkdirSync('src', { recursive: true });

              // Write JSON for the page to fetch
              fs.writeFileSync('src/translations.json', JSON.stringify(data, null, 2));

              // Minimal static dashboard (no build tools)
              const html = `<!doctype html>
              <html lang="en">
              <head>
                <meta charset="utf-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <title>Language Services Dashboard</title>
                <link rel="preconnect" href="https://fonts.googleapis.com">
                <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
                <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
                <style>
                  body { font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; margin: 0; background:#0f172a; color:#e2e8f0; }
                  .wrap { max-width: 1100px; margin: 40px auto; padding: 0 16px; }
                  h1 { font-size: 28px; margin: 0 0 8px; }
                  .muted { color:#94a3b8; }
                  .cards { display:grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap:16px; margin-top:16px; }
                  .card { background: rgba(255,255,255,0.06); border:1px solid rgba(255,255,255,0.12); border-radius:12px; padding:16px; }
                  .badge { display:inline-block; padding:2px 8px; border-radius:999px; font-size:12px; border:1px solid rgba(255,255,255,0.2); }
                  .status-Completed { background: rgba(34,197,94,0.15); border-color: rgba(34,197,94,0.35); color:#86efac; }
                  .status-Pending, .status-In\\ Progress { background: rgba(59,130,246,0.15); border-color: rgba(59,130,246,0.35); color:#93c5fd; }
                  a.btn { display:inline-block; margin-top:10px; padding:8px 10px; border-radius:8px; background:#3b82f6; color:white; text-decoration:none; }
                  .row { display:flex; gap:10px; align-items:center; flex-wrap:wrap; }
                  select { background:rgba(255,255,255,0.06); color:#e2e8f0; border:1px solid rgba(255,255,255,0.12); border-radius:8px; padding:8px; }
                  .kpi { display:grid; grid-template-columns: repeat(5, minmax(0,1fr)); gap:12px; margin:16px 0; }
                  .kpi > div { background: rgba(255,255,255,0.06); border:1px solid rgba(255,255,255,0.12); border-radius:12px; padding:14px; }
                  .kpi h3 { margin:0; font-size:22px; }
                  .kpi p { margin:4px 0 0; color:#cbd5e1; font-size:13px; }
                </style>
              </head>
              <body>
                <div class="wrap">
                  <h1>Language Services Dashboard</h1>
                  <div class="muted" id="timestamp"></div>

                  <div class="kpi" id="kpi"></div>

                  <div class="row" style="margin:12px 0;">
                    <label>
                      <span class="muted" style="font-size:13px;">Filter program:</span><br/>
                      <select id="programFilter"></select>
                    </label>
                    <label>
                      <span class="muted" style="font-size:13px;">Filter status:</span><br/>
                      <select id="statusFilter">
                        <option value="all">All</option>
                        <option>Pending</option>
                        <option>In Progress</option>
                        <option>Completed</option>
                      </select>
                    </label>
                  </div>

                  <div class="cards" id="cards"></div>
                </div>

                <script>
                  async function load() {
                    const res = await fetch('./translations.json', { cache: 'no-store' });
                    const data = await res.json();

                    document.getElementById('timestamp').textContent = 'Last updated: ' + new Date().toLocaleString();

                    // KPIs
                    const total = data.length;
                    const completed = data.filter(d => (d.status||'').toLowerCase() === 'completed').length;
                    const inprog = data.filter(d => (d.status||'').toLowerCase() === 'in progress').length;
                    const withLinks = data.filter(d => d.link && d.link.trim() !== '').length;
                    const overdue = data.filter(d => {
                      if (!d.deadline) return false;
                      const dd = new Date(d.deadline);
                      const now = new Date();
                      const isCompleted = (d.status||'').toLowerCase() === 'completed';
                      return dd < now && !isCompleted;
                    }).length;

                    const kpi = document.getElementById('kpi');
                    kpi.innerHTML = [
                      ['Requests', total],
                      ['Completed', completed],
                      ['In Progress', inprog],
                      ['Overdue', overdue],
                      ['With Links', withLinks]
                    ].map(([label, val]) => 
                      \`<div><h3>\${val}</h3><p>\${label}</p></div>\`
                    ).join('');

                    const programs = Array.from(new Set(data.map(d => d.program).filter(Boolean))).sort();
                    const programSel = document.getElementById('programFilter');
                    programSel.innerHTML = '<option value="all">All</option>' + programs.map(p => \`<option>\${p}</option>\`).join('');
                    programSel.addEventListener('change', () => render());
                    document.getElementById('statusFilter').addEventListener('change', () => render());

                    function render() {
                      const pVal = programSel.value;
                      const sVal = document.getElementById('statusFilter').value;
                      const cards = document.getElementById('cards');
                      const filtered = data.filter(d => 
                        (pVal === 'all' || d.program === pVal) &&
                        (sVal === 'all' || (d.status||'') === sVal)
                      );

                      cards.innerHTML = filtered.map(d => {
                        const statusClass = 'status-' + (d.status||'').replace(' ', '\\ ');
                        return \`
                          <div class="card">
                            <div class="row" style="justify-content:space-between;">
                              <div style="font-weight:600;">\${d.title || '(Untitled)'}</div>
                              <span class="badge \${statusClass}">\${d.status || 'Pending'}</span>
                            </div>
                            <div class="muted" style="margin:6px 0 10px;">\${d.program || ''} • \${d.language || ''}</div>
                            <div class="muted" style="font-size:13px;">
                              Requested: \${d.requested || '—'} • Deadline: \${d.deadline || '—'}
                            </div>
                            \${d.link ? \`<a class="btn" href="\${d.link}" target="_blank" rel="noopener">Open Link</a>\` : ''}
                          </div>\`;
                      }).join('');
                    }
                    render();
                  }
                  load().catch(err => {
                    document.getElementById('cards').innerHTML = '<div class="muted">Error loading data.</div>';
                    console.error(err);
                  });
                </script>
              </body>
              </html>`;
              fs.writeFileSync('src/index.html', html);

              console.log('✅ Built src/index.html and src/translations.json');
            } catch (e) {
              console.error('❌ Build error:', e?.stack || e);
              process.exit(1);
            }
          })();
          NODE

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - na
