name: Update & Deploy Interpretation Dashboard

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */2 * * *" # every 2 hours (UTC)

jobs:
  build-and-deploy-interpretation:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install deps
        run: npm install googleapis@^131 google-auth-library@^9.14.2

      - name: Fetch Interpretation data and build page
        env:
          INTERP_SHEET_ID: ${{ secrets.INTERP_SHEET_ID }}
          GOOGLE_SHEET_ID: ${{ secrets.GOOGLE_SHEET_ID }}
          GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
        run: |
          node - <<'NODE'
          const { google } = require('googleapis');
          const { JWT } = require('google-auth-library');
          const fs = require('fs');
          const path = require('path');

          (async () => {
            try {
              const SHEET_ID = (process.env.INTERP_SHEET_ID || process.env.GOOGLE_SHEET_ID || '').trim();
              const RAW = (process.env.GOOGLE_SERVICE_ACCOUNT || '').trim();
              if (!SHEET_ID || !RAW) throw new Error('Missing sheet ID or service account secret.');

              const creds = JSON.parse(RAW);
              if (creds.private_key && creds.private_key.includes('\\n')) {
                creds.private_key = creds.private_key.replace(/\\n/g, '\n');
              }

              const auth = new JWT({
                email: creds.client_email,
                key: creds.private_key,
                scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
              });
              const sheets = google.sheets({ version: 'v4', auth });

              // Read from the "Interpretation" tab, columns A:G
              const range = 'Interpretation!A:G';
              const resp = await sheets.spreadsheets.values.get({
                spreadsheetId: SHEET_ID,
                range,
              });
              let rows = resp.data.values || [];
              if (!rows.length) rows = [];

              // Skip header row
              if (rows[0] && rows[0].join(' ').toLowerCase().includes('event')) {
                rows = rows.slice(1);
              }

              const data = rows.map((r, i) => ({
                id: i + 1,
                program: (r[0] || '').trim(),
                languageType: (r[1] || '').trim(),
                eventName: (r[2] || '').trim(),
                eventDate: (r[3] || '').trim(),
                eventTime: (r[4] || '').trim(),
                interpreter: (r[5] || '').trim(),
                status: (r[6] || 'Pending').trim(),
              })).filter(d => d.program || d.eventName);

              fs.mkdirSync('src', { recursive: true });
              fs.writeFileSync('src/interpretation.json', JSON.stringify(data, null, 2));

              const html = `<!doctype html>
              <html lang="en">
              <head>
                <meta charset="utf-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <title>Interpretation Requests</title>
                <style>
                  body { font-family: system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; margin:0; background:#0f172a; color:#e2e8f0; }
                  .wrap { max-width: 1100px; margin: 40px auto; padding: 0 16px; }
                  h1 { font-size: 28px; margin: 0 0 8px; }
                  .muted { color:#94a3b8; }
                  .row { display:flex; gap:10px; align-items:center; flex-wrap:wrap; }
                  select, input { background:rgba(255,255,255,0.06); color:#e2e8f0; border:1px solid rgba(255,255,255,0.12); border-radius:8px; padding:8px; }
                  .kpi { display:grid; grid-template-columns: repeat(5, minmax(0,1fr)); gap:12px; margin:16px 0; }
                  .kpi > div { background: rgba(255,255,255,0.06); border:1px solid rgba(255,255,255,0.12); border-radius:12px; padding:14px; }
                  .kpi h3 { margin:0; font-size:22px; }
                  .cards { display:grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap:16px; margin-top:16px; }
                  .card { background: rgba(255,255,255,0.06); border:1px solid rgba(255,255,255,0.12); border-radius:12px; padding:16px; }
                  .badge { display:inline-block; padding:2px 8px; border-radius:999px; font-size:12px; border:1px solid rgba(255,255,255,0.2); }
                  .status-Completed { background: rgba(34,197,94,0.15); border-color: rgba(34,197,94,0.35); color:#86efac; }
                  .status-Pending, .status-In\\ Progress { background: rgba(59,130,246,0.15); border-color: rgba(59,130,246,0.35); color:#93c5fd; }
                  .status-Cancelled { background: rgba(239,68,68,0.15); border-color: rgba(239,68,68,0.35); color:#fca5a5; }
                  a.back { color:#93c5fd; text-decoration:none; display:inline-block; margin-bottom:16px; }
                </style>
              </head>
              <body>
                <div class="wrap">
                  <a class="back" href="./index.html">&larr; Back to Translations</a>
                  <h1>Interpretation Requests</h1>
                  <div class="muted" id="timestamp"></div>

                  <div class="kpi" id="kpi"></div>

                  <div class="row" style="margin:12px 0;">
                    <label>
                      <div class="muted" style="font-size:13px;">Program</div>
                      <select id="programFilter"></select>
                    </label>
                    <label>
                      <div class="muted" style="font-size:13px;">Language/Type</div>
                      <select id="langFilter"></select>
                    </label>
                    <label>
                      <div class="muted" style="font-size:13px;">Status</div>
                      <select id="statusFilter"></select>
                    </label>
                    <label>
                      <div class="muted" style="font-size:13px;">Event date on/after</div>
                      <input type="date" id="dateFilter" />
                    </label>
                    <button id="clear">Clear</button>
                  </div>

                  <div class="cards" id="cards"></div>
                </div>
                <script>
                  async function load() {
                    const res = await fetch('./interpretation.json', { cache: 'no-store' });
                    const data = await res.json();
                    document.getElementById('timestamp').textContent = 'Last updated: ' + new Date().toLocaleString();

                    // KPIs
                    const total = data.length;
                    const completed = data.filter(d => d.status.toLowerCase() === 'completed').length;
                    const inprog = data.filter(d => d.status.toLowerCase() === 'in progress').length;
                    const pending = data.filter(d => d.status.toLowerCase() === 'pending').length;
                    const upcoming = data.filter(d => {
                      if (!d.eventDate) return false;
                      const dd = new Date(d.eventDate);
                      const today = new Date(); today.setHours(0,0,0,0);
                      return dd >= today;
                    }).length;

                    const kpi = document.getElementById('kpi');
                    kpi.innerHTML = [
                      ['Total requests', total],
                      ['Completed', completed],
                      ['In Progress', inprog],
                      ['Pending', pending],
                      ['Upcoming (>= today)', upcoming],
                    ].map(([label, val]) => \`<div><h3>\${val}</h3><div class="muted">\${label}</div></div>\`).join('');

                    // Filters
                    const programs = Array.from(new Set(data.map(d => d.program).filter(Boolean))).sort();
                    const langs = Array.from(new Set(data.map(d => d.languageType).filter(Boolean))).sort();
                    const statuses = Array.from(new Set(data.map(d => d.status).filter(Boolean))).sort();

                    const programSel = document.getElementById('programFilter');
                    programSel.innerHTML = '<option value="all">All</option>' + programs.map(p => \`<option>\${p}</option>\`).join('');

                    const langSel = document.getElementById('langFilter');
                    langSel.innerHTML = '<option value="all">All</option>' + langs.map(l => \`<option>\${l}</option>\`).join('');

                    const statusSel = document.getElementById('statusFilter');
                    statusSel.innerHTML = '<option value="all">All</option>' + statuses.map(s => \`<option>\${s}</option>\`).join('');

                    const dateInput = document.getElementById('dateFilter');
                    document.getElementById('clear').addEventListener('click', () => {
                      programSel.value = 'all';
                      langSel.value = 'all';
                      statusSel.value = 'all';
                      dateInput.value = '';
                      render();
                    });
                    programSel.addEventListener('change', render);
                    langSel.addEventListener('change', render);
                    statusSel.addEventListener('change', render);
                    dateInput.addEventListener('change', render);

                    function render() {
                      const pVal = programSel.value;
                      const lVal = langSel.value;
                      const sVal = statusSel.value;
                      const dVal = dateInput.value ? new Date(dateInput.value) : null;
                      if (dVal) dVal.setHours(0,0,0,0);

                      const filtered = data.filter(d =>
                        (pVal === 'all' || d.program === pVal) &&
                        (lVal === 'all' || d.languageType === lVal) &&
                        (sVal === 'all' || d.status === sVal) &&
                        (!dVal || (d.eventDate && new Date(d.eventDate) >= dVal))
                      );

                      const cards = document.getElementById('cards');
                      cards.innerHTML = filtered.map(d => {
                        const statusClass = 'status-' + d.status.replace(' ', '\\ ');
                        return \`
                          <div class="card">
                            <div style="display:flex; justify-content:space-between; align-items:center;">
                              <div style="font-weight:600;">\${d.eventName || '(Untitled event)'}</div>
                              <span class="badge \${statusClass}">\${d.status || ''}</span>
                            </div>
                            <div class="muted" style="margin:6px 0 10px;">\${d.program || ''} • \${d.languageType || ''}</div>
                            <div class="muted" style="font-size:13px;">
                              Date: \${d.eventDate || '—'} • Time: \${d.eventTime || '—'}
                            </div>
                            <div class="muted" style="margin-top:8px; font-size:13px;">
                              Interpreter: \${d.interpreter || 'TBD'}
                            </div>
                          </div>\`;
                      }).join('');
                    }
                    render();
                  }
                  load().catch(err => {
                    document.getElementById('cards').innerHTML = '<div class="muted">Error loading data.</div>';
                    console.error(err);
                  });
                </script>
              </body>
              </html>`;

              fs.writeFileSync(path.join('src','interpretation.html'), html);
              console.log('✅ Built src/interpretation.html and src/interpretation.json');
            } catch (e) {
              console.error('❌ Build error:', e?.response?.data || e?.stack || e);
              process.exit(1);
            }
          })();
          NODE

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact (./src)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./src

      - name: Deploy
        id: deploy
        uses: actions/deploy-pages@v4
